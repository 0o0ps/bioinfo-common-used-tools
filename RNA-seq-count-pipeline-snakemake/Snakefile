# 从文件读取样本列表
with open("samples.txt") as f:
    SAMPLES = [line.strip() for line in f.readlines()]

rule all:
    input:
        expand("data/processed/counts/Daping/{sample}_gene_rawcounts.txt", sample=SAMPLES)

rule remove_adapter:
    '''
    remove adapter
    '''
    input:
        fq1 = "data/raw/Pre_biospy_GC_RNA/Daping-fastq/{sample}R1.fastq.gz",
        fq2 = "data/raw/Pre_biospy_GC_RNA/Daping-fastq/{sample}R2.fastq.gz"
    output:
        fq1_Paired = "data/processed/AdapterRemoved/Daping-fastq/{sample}_1P.fastq",
        fq1_Unpaired = "data/processed/AdapterRemoved/Daping-fastq/{sample}_1U.fastq",
        fq2_Paired = "data/processed/AdapterRemoved/Daping-fastq/{sample}_2P.fastq",
        fq2_Unpaired = "data/processed/AdapterRemoved/Daping-fastq/{sample}_2U.fastq"
    params:
        baseout = "data/processed/AdapterRemoved/Daping-fastq/{sample}.fastq",
        threads = "5" #! 2个线程,还没用上
    threads: 1 # 1个线程
    # resources:
    #     mem_mb=4000  # 限制内存为 4000 MB (即 4 GB)
    shell:
        "scripts/2filter_adapter.sh {input.fq1} {input.fq2} {params.baseout} {params.threads}"

rule alignment:
    '''
    alignment
    '''
    input:
        fq1 = "data/processed/AdapterRemoved/Daping-fastq/{sample}_1P.fastq",
        fq2 = "data/processed/AdapterRemoved/Daping-fastq/{sample}_2P.fastq"
    output:
        sam = "data/processed/sam/Daping/{sample}.sam"
    params:
        threads = "8"
    threads: 1
    shell:
        "scripts/3alignment.sh {params.threads} {input.fq1} {input.fq2} {output.sam} "

rule sam2bam:
    '''
    sam2bam
    '''
    input:
        sam = "data/processed/sam/Daping/{sample}.sam"
    output:
        bam = "data/processed/bam/Daping/{sample}.bam"
    shell:
        "scripts/4transfer_into_bam_file.sh {input.sam} {output.bam}"

rule sort_bam:
    '''
    sort bam
    '''
    input:
        bam = "data/processed/bam/Daping/{sample}.bam"
    output:
        sorted_bam = "data/processed/sorted_bam/Daping/{sample}.bam"
    shell:
        "scripts/5sort_bam.sh {input.bam} {output.sorted_bam}"

rule bam2counts:
    '''
    bam2counts
    '''
    input:
        bam = "data/processed/sorted_bam/Daping/{sample}.bam"
    output:
        counts = "data/processed/counts/Daping/{sample}_gene_rawcounts.txt"
    params:
        threads = "8"
    shell:
        "scripts/6bam2counts.sh {params.threads} {output.counts} {input.bam}"